plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'androidx.navigation.safeargs.kotlin'
}

def useReleaseKeystore = rootProject.file("signing/app-release.jks").exists()

android {
    compileSdk buildConfig.compileSdk

    defaultConfig {
        applicationId "com.kshitijpatil.tazabazar"
        minSdk buildConfig.minSdk
        targetSdk buildConfig.targetSdk
        versionCode 1
        versionName "1.0.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        // The following argument makes the Android Test Orchestrator run its
        // "pm clear" command after each test invocation. This command ensures
        // that the app's state is completely cleared between tests.
        testInstrumentationRunnerArguments clearPackageData: 'true'

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += [
                        "room.incremental": "true",
                        "room.schemaLocation":"$projectDir/schemas".toString(),
                ]
            }
        }
    }
    signingConfigs {
        debug {
            storeFile rootProject.file("signing/app-debug.jks")
            storePassword "kotlin"
            keyAlias "tazabazar-debug"
            keyPassword "kotlin"
        }

        release {
            if (useReleaseKeystore) {
                storeFile rootProject.file("signing/app-release.jks")
                storePassword propOrDef('TAZABAZAR_RELEASE_PWD', "")
                keyAlias "tazabazar-release"
                keyPassword propOrDef('TAZABAZAR_RELEASE_PWD', "")
            }
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            versionNameSuffix "-dev"
            applicationIdSuffix ".debug"
        }

        release {
            if (useReleaseKeystore) {
                signingConfig signingConfigs.release
            } else {
                // Otherwise just use the debug keystore (this is mainly for PR CI builds)
                signingConfig signingConfigs.debug
            }
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    buildFeatures {
        viewBinding true
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
    // workaround for compilation errors when using kotlinx-coroutines-test in androidTest
    // ref: https://github.com/Kotlin/kotlinx.coroutines/issues/2023#issuecomment-858644393
    packagingOptions {
        // for JNA and JNA-platform
        exclude "META-INF/AL2.0"
        exclude "META-INF/LGPL2.1"
        // for byte-buddy
        exclude "META-INF/licenses/ASM"
        pickFirst "win32-x86-64/attach_hotspot_windows.dll"
        pickFirst "win32-x86/attach_hotspot_windows.dll"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation project(':api-client')
    implementation project(":base")
    implementation libs.androidx.coreKtx
    implementation libs.androidx.appcompat
    implementation libs.androidx.recyclerview
    implementation libs.androidx.swiperefreshlayout
    implementation libs.androidx.constraintlayout
    implementation libs.androidx.cardview
    implementation libs.android.material
    implementation libs.androidx.fragment.fragmentKtx
    implementation libs.androidx.lifecycle.lifecycleRuntimeKtx
    implementation libs.androidx.navigation.navigationFragmentKtx
    implementation libs.androidx.room.ktx
    implementation libs.androidx.room.runtime
    implementation libs.androidx.datastore.preferences
    kapt libs.androidx.room.compiler
    implementation libs.androidx.navigation.navigationUiKtx
    implementation libs.androidx.work.workKtx

    // third-party
    implementation libs.coil
    implementation libs.okhttp.okhttp
    implementation libs.okhttp.loggingInterceptor
    implementation libs.threeTenAbp
    implementation libs.timber
    implementation libs.phonemoji
    implementation libs.arrowkt.arrowCore
    kapt libs.moshi.kotlinCodegen

    testImplementation libs.junit
    // Needed for Tzdb
    testImplementation "org.threeten:threetenbp:${libs.versions.threetenbp.get()}"
    testImplementation libs.truth
    testImplementation libs.robolectric
    testImplementation libs.androidx.archCoreKtx
    testImplementation libs.androidx.test.rules
    testImplementation libs.androidx.test.junit
    testImplementation libs.kotlin.coroutines.test
    testImplementation libs.turbine
    testImplementation libs.mockito.core
    testImplementation libs.mockito.kotlin

    androidTestImplementation libs.espresso.contrib
    androidTestImplementation libs.espresso.core
    androidTestImplementation libs.androidx.test.junit
    androidTestImplementation libs.androidx.test.rules
    androidTestImplementation libs.androidx.test.runner
    androidTestImplementation libs.androidx.archCoreKtx
    androidTestImplementation libs.androidx.fragment.fragmentTesting
    androidTestImplementation libs.androidx.work.testing
    androidTestImplementation libs.truth

    androidTestImplementation libs.dexmaker.mockito.inline
    androidTestImplementation libs.mockito.kotlin
    androidTestImplementation libs.kotlin.coroutines.test
}